package graderd

import (
	"context"
	"crypto/md5"
	"math/rand"

	"github.com/pkg/errors"
)

type Scheduler interface {
	CreateAssignment(ctx context.Context, imageTar []byte) (string, error)

	ListTasks(ctx context.Context, assignmentID string, db Database) ([]*Task, error)
	CreateTasks(ctx context.Context, image, imageURL string, taskList []*Task) ([]string, error)
	StartTasks(ctx context.Context, taskIDs []string, db Database) error
	EndTask(ctx context.Context, taskID string) error

	TaskOutput(ctx context.Context, id string) ([]byte, error)
}

type MockScheduler struct {
	assignmentIDs   []string
	assignmentTasks map[string][]*Task
	tasksTable      map[string]*Task
}

func (m *MockScheduler) CreateAssignment(ctx context.Context, imageTar []byte) (string, error) {
	h := md5.Sum(imageTar)
	id := string(h[:])
	m.assignmentIDs = append(m.assignmentIDs, id)
	return id, nil
}

func (m *MockScheduler) ListTasks(ctx context.Context, assignmentID string, db Database) ([]*Task, error) {
	return m.assignmentTasks[assignmentID], nil
}

func (m *MockScheduler) existsAssignment(ctx context.Context, assignmentID string) bool {
	for _, id := range m.assignmentIDs {
		if id == assignmentID {
			return true
		}
	}
	return false
}

func (m *MockScheduler) CreateTasks(ctx context.Context, image, imageURL string, taskList []*Task) ([]string, error) {
	ids := make([]string, 0, len(taskList))
	for _, t := range taskList {
		if !m.existsAssignment(ctx, t.AssignmentID) {
			return nil, ErrAssignmentNotFound
		}

		// generate "container id"
		containerID := make([]byte, 16)
		if _, err := rand.Read(containerID); err != nil {
			return nil, errors.Wrap(err, ErrFailedToCreateTask.Error())
		}

		t.ContainerID = string(containerID)
		ids = append(ids, t.ID)

		// store tasks in assignments
		m.assignmentTasks[t.AssignmentID] = append(m.assignmentTasks[t.AssignmentID], t)
		m.tasksTable[t.ID] = t
	}

	return ids, nil
}

func (m *MockScheduler) StartTasks(ctx context.Context, taskIDs []string, db Database) error {
	for _, id := range taskIDs {
		t, ok := m.tasksTable[id]
		if !ok {
			return ErrTaskNotFound
		}
		t.Status = StatusStarted
	}

	return nil
}

func (m *MockScheduler) EndTask(ctx context.Context, taskID string) error {
	if t, ok := m.tasksTable[taskID]; !ok {
		return ErrTaskNotFound
	} else {
		t.Status = StatusComplete
	}
	return nil
}

func (m *MockScheduler) TaskOutput(ctx context.Context, id string) ([]byte, error) {
	sampleOutput := `
		this is a sample output generated by MockScheduler...
	`
	if _, ok := m.tasksTable[id]; !ok {
		return nil, ErrTaskNotFound
	}

	return []byte(sampleOutput), nil
}
