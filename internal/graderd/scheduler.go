package graderd

import (
	"bytes"
	"context"
	"github.com/docker/docker/pkg/ioutils"
	"math/rand"

	"github.com/pkg/errors"
)

type Scheduler interface {
	CreateImage(ctx context.Context, imageName string, imageTar []byte) error

	ListTasks(ctx context.Context, assignmentID string, db Database) ([]*Task, error)
	CreateTasks(ctx context.Context, taskList []*Task, db Database) error
	StartTasks(ctx context.Context, taskList []*Task, db Database) error
	EndTask(ctx context.Context, taskID string, db Database) error

	TaskOutput(ctx context.Context, taskID string, db Database, results chan *Task) error
}

type MockScheduler struct {
}

func NewMockScheduler() *MockScheduler {
	return &MockScheduler{}
}

func (m *MockScheduler) CreateImage(ctx context.Context, imageName string, imageTar []byte) error {
	return nil
}

func (m *MockScheduler) ListTasks(ctx context.Context, assignmentID string, db Database) ([]*Task, error) {
	return nil, nil
}

func (m *MockScheduler) CreateTasks(ctx context.Context, taskList []*Task, db Database) error {
	for _, t := range taskList {
		// generate "container id"
		containerID := make([]byte, 16)
		if _, err := rand.Read(containerID); err != nil {
			return errors.Wrap(err, ErrFailedToCreateTask.Error())
		}

		t.ContainerID = string(containerID)
		t.Status = StatusPending
	}
	err := db.PutTasks(ctx, taskList)
	if err != nil {
		return err
	}

	return nil
}

func (m *MockScheduler) StartTasks(ctx context.Context, taskList []*Task, db Database) error {
	for _, task := range taskList {
		task.Status = StatusStarted
		if err := db.UpdateTask(ctx, task); err != nil {
			return err
		}
	}

	return nil
}

func (m *MockScheduler) EndTask(ctx context.Context, taskID string, db Database) error {
	task, err := db.GetTaskByID(ctx, taskID)
	if err != nil {
		return err
	}
	task.Status = StatusComplete
	// update database
	if err := db.UpdateTask(ctx, task); err != nil {
		return err
	}

	return nil
}

func (m *MockScheduler) TaskOutput(ctx context.Context, taskID string, db Database, results chan *Task) error {
	sampleOutput := []byte(`
		this is a sample output generated by MockScheduler...
	`)
	t, err := db.GetTaskByID(ctx, taskID)
	if err != nil {
		return ErrTaskNotFound
	}
	t.Output = ioutils.NewReadCloserWrapper(bytes.NewReader(sampleOutput), func() error {
		return nil
	})
	results <- t

	return nil
}
